//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Util/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""OffBoard"",
            ""id"": ""4efeb989-f016-475a-83dd-7f0481591aee"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""b27cd844-5f0e-48df-a966-3e0af8091d5c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftTriggerPress"",
                    ""type"": ""Value"",
                    ""id"": ""388f9655-95bd-49dc-a5de-dfb8914c28a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightTriggerPress"",
                    ""type"": ""Value"",
                    ""id"": ""4920b95a-64cd-466c-88f0-b25398b5dce7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Use"",
                    ""type"": ""Button"",
                    ""id"": ""1288f6be-2256-4298-8ea0-f174711e604d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Talk"",
                    ""type"": ""Button"",
                    ""id"": ""7779aed0-4036-40fe-a812-cb1c550f1d8b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pose"",
                    ""type"": ""Button"",
                    ""id"": ""eca70c7b-8c6d-478b-a265-ec23a8ffb955"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""903e807d-2bf1-47c5-b9b0-d606e2d026f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftTriggerRelease"",
                    ""type"": ""Button"",
                    ""id"": ""26a7a539-3da6-408f-8fc7-f2db35e069e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightTriggerRelease"",
                    ""type"": ""Button"",
                    ""id"": ""5e96b721-f6d8-4e9e-8edd-98fbe03e2956"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0fb19486-6470-4595-ae38-897836266eec"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DualShock4"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd2c1775-ed88-4621-b3b7-c6abe2377675"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DualShock4"",
                    ""action"": ""LeftTriggerPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ccc7447-3837-48e2-bf72-0410069f0e7b"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTriggerPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""004841ef-5613-41a3-9991-77c78e526852"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""141eeab4-9728-4b6c-b856-a0e7af226134"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Talk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12cca976-63c3-4ee7-b1da-f5a6a5cb850a"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5ecb02f-2326-4e8c-a3c6-01efa51821a2"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6020fffb-11b5-4a2d-82ec-e0f3a15c48ee"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTriggerRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c05f1a22-aeb7-4bff-ad5b-02f2ac751016"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTriggerRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""DualShock4"",
            ""bindingGroup"": ""DualShock4"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // OffBoard
        m_OffBoard = asset.FindActionMap("OffBoard", throwIfNotFound: true);
        m_OffBoard_Movement = m_OffBoard.FindAction("Movement", throwIfNotFound: true);
        m_OffBoard_LeftTriggerPress = m_OffBoard.FindAction("LeftTriggerPress", throwIfNotFound: true);
        m_OffBoard_RightTriggerPress = m_OffBoard.FindAction("RightTriggerPress", throwIfNotFound: true);
        m_OffBoard_Use = m_OffBoard.FindAction("Use", throwIfNotFound: true);
        m_OffBoard_Talk = m_OffBoard.FindAction("Talk", throwIfNotFound: true);
        m_OffBoard_Pose = m_OffBoard.FindAction("Pose", throwIfNotFound: true);
        m_OffBoard_Interact = m_OffBoard.FindAction("Interact", throwIfNotFound: true);
        m_OffBoard_LeftTriggerRelease = m_OffBoard.FindAction("LeftTriggerRelease", throwIfNotFound: true);
        m_OffBoard_RightTriggerRelease = m_OffBoard.FindAction("RightTriggerRelease", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // OffBoard
    private readonly InputActionMap m_OffBoard;
    private IOffBoardActions m_OffBoardActionsCallbackInterface;
    private readonly InputAction m_OffBoard_Movement;
    private readonly InputAction m_OffBoard_LeftTriggerPress;
    private readonly InputAction m_OffBoard_RightTriggerPress;
    private readonly InputAction m_OffBoard_Use;
    private readonly InputAction m_OffBoard_Talk;
    private readonly InputAction m_OffBoard_Pose;
    private readonly InputAction m_OffBoard_Interact;
    private readonly InputAction m_OffBoard_LeftTriggerRelease;
    private readonly InputAction m_OffBoard_RightTriggerRelease;
    public struct OffBoardActions
    {
        private @PlayerInputs m_Wrapper;
        public OffBoardActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_OffBoard_Movement;
        public InputAction @LeftTriggerPress => m_Wrapper.m_OffBoard_LeftTriggerPress;
        public InputAction @RightTriggerPress => m_Wrapper.m_OffBoard_RightTriggerPress;
        public InputAction @Use => m_Wrapper.m_OffBoard_Use;
        public InputAction @Talk => m_Wrapper.m_OffBoard_Talk;
        public InputAction @Pose => m_Wrapper.m_OffBoard_Pose;
        public InputAction @Interact => m_Wrapper.m_OffBoard_Interact;
        public InputAction @LeftTriggerRelease => m_Wrapper.m_OffBoard_LeftTriggerRelease;
        public InputAction @RightTriggerRelease => m_Wrapper.m_OffBoard_RightTriggerRelease;
        public InputActionMap Get() { return m_Wrapper.m_OffBoard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OffBoardActions set) { return set.Get(); }
        public void SetCallbacks(IOffBoardActions instance)
        {
            if (m_Wrapper.m_OffBoardActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_OffBoardActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_OffBoardActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_OffBoardActionsCallbackInterface.OnMovement;
                @LeftTriggerPress.started -= m_Wrapper.m_OffBoardActionsCallbackInterface.OnLeftTriggerPress;
                @LeftTriggerPress.performed -= m_Wrapper.m_OffBoardActionsCallbackInterface.OnLeftTriggerPress;
                @LeftTriggerPress.canceled -= m_Wrapper.m_OffBoardActionsCallbackInterface.OnLeftTriggerPress;
                @RightTriggerPress.started -= m_Wrapper.m_OffBoardActionsCallbackInterface.OnRightTriggerPress;
                @RightTriggerPress.performed -= m_Wrapper.m_OffBoardActionsCallbackInterface.OnRightTriggerPress;
                @RightTriggerPress.canceled -= m_Wrapper.m_OffBoardActionsCallbackInterface.OnRightTriggerPress;
                @Use.started -= m_Wrapper.m_OffBoardActionsCallbackInterface.OnUse;
                @Use.performed -= m_Wrapper.m_OffBoardActionsCallbackInterface.OnUse;
                @Use.canceled -= m_Wrapper.m_OffBoardActionsCallbackInterface.OnUse;
                @Talk.started -= m_Wrapper.m_OffBoardActionsCallbackInterface.OnTalk;
                @Talk.performed -= m_Wrapper.m_OffBoardActionsCallbackInterface.OnTalk;
                @Talk.canceled -= m_Wrapper.m_OffBoardActionsCallbackInterface.OnTalk;
                @Pose.started -= m_Wrapper.m_OffBoardActionsCallbackInterface.OnPose;
                @Pose.performed -= m_Wrapper.m_OffBoardActionsCallbackInterface.OnPose;
                @Pose.canceled -= m_Wrapper.m_OffBoardActionsCallbackInterface.OnPose;
                @Interact.started -= m_Wrapper.m_OffBoardActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_OffBoardActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_OffBoardActionsCallbackInterface.OnInteract;
                @LeftTriggerRelease.started -= m_Wrapper.m_OffBoardActionsCallbackInterface.OnLeftTriggerRelease;
                @LeftTriggerRelease.performed -= m_Wrapper.m_OffBoardActionsCallbackInterface.OnLeftTriggerRelease;
                @LeftTriggerRelease.canceled -= m_Wrapper.m_OffBoardActionsCallbackInterface.OnLeftTriggerRelease;
                @RightTriggerRelease.started -= m_Wrapper.m_OffBoardActionsCallbackInterface.OnRightTriggerRelease;
                @RightTriggerRelease.performed -= m_Wrapper.m_OffBoardActionsCallbackInterface.OnRightTriggerRelease;
                @RightTriggerRelease.canceled -= m_Wrapper.m_OffBoardActionsCallbackInterface.OnRightTriggerRelease;
            }
            m_Wrapper.m_OffBoardActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @LeftTriggerPress.started += instance.OnLeftTriggerPress;
                @LeftTriggerPress.performed += instance.OnLeftTriggerPress;
                @LeftTriggerPress.canceled += instance.OnLeftTriggerPress;
                @RightTriggerPress.started += instance.OnRightTriggerPress;
                @RightTriggerPress.performed += instance.OnRightTriggerPress;
                @RightTriggerPress.canceled += instance.OnRightTriggerPress;
                @Use.started += instance.OnUse;
                @Use.performed += instance.OnUse;
                @Use.canceled += instance.OnUse;
                @Talk.started += instance.OnTalk;
                @Talk.performed += instance.OnTalk;
                @Talk.canceled += instance.OnTalk;
                @Pose.started += instance.OnPose;
                @Pose.performed += instance.OnPose;
                @Pose.canceled += instance.OnPose;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @LeftTriggerRelease.started += instance.OnLeftTriggerRelease;
                @LeftTriggerRelease.performed += instance.OnLeftTriggerRelease;
                @LeftTriggerRelease.canceled += instance.OnLeftTriggerRelease;
                @RightTriggerRelease.started += instance.OnRightTriggerRelease;
                @RightTriggerRelease.performed += instance.OnRightTriggerRelease;
                @RightTriggerRelease.canceled += instance.OnRightTriggerRelease;
            }
        }
    }
    public OffBoardActions @OffBoard => new OffBoardActions(this);
    private int m_DualShock4SchemeIndex = -1;
    public InputControlScheme DualShock4Scheme
    {
        get
        {
            if (m_DualShock4SchemeIndex == -1) m_DualShock4SchemeIndex = asset.FindControlSchemeIndex("DualShock4");
            return asset.controlSchemes[m_DualShock4SchemeIndex];
        }
    }
    public interface IOffBoardActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLeftTriggerPress(InputAction.CallbackContext context);
        void OnRightTriggerPress(InputAction.CallbackContext context);
        void OnUse(InputAction.CallbackContext context);
        void OnTalk(InputAction.CallbackContext context);
        void OnPose(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnLeftTriggerRelease(InputAction.CallbackContext context);
        void OnRightTriggerRelease(InputAction.CallbackContext context);
    }
}
